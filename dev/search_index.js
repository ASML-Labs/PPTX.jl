var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API Reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [PPTX]","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [PPTX]","category":"page"},{"location":"api/#PPTX.Picture","page":"API Reference","title":"PPTX.Picture","text":"Picture(source::String; top::Int=0, left::Int=0, size::Int = 40)\n\nsource::String path of image file\ntop::Int mm from the top\nleft::Int mm from the left\n\nInternally the sizes are converted EMUs.\n\nExamples\n\njulia> using PPTX\n\njulia> img = Picture(joinpath(PPTX.ASSETS_DIR, \"cauliflower.jpg\"))\nPicture\n source is \"./cauliflower.jpg\"\n offset_x is 0 EMUs\n offset_y is 0 EMUs\n size_x is 1440000 EMUs\n size_y is 1475072 EMUs\n\n\nOptionally, you can set the size_x and size_y manually for filetypes not supported by FileIO, such as SVG.\n\njulia> using PPTX\n\njulia> img = Picture(joinpath(PPTX.ASSETS_DIR, \"julia_logo.svg\"); size_x=40, size_y=30)\nPicture\n source is \"./julia_logo.svg\"\n offset_x is 0 EMUs\n offset_y is 0 EMUs\n size_x is 1440000 EMUs\n size_y is 1080000 EMUs\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.Presentation","page":"API Reference","title":"PPTX.Presentation","text":"Presentation(\n    slides::Vector{Slide}=Slide[];\n    title::String=\"My Presentation\",\n    author::String=\"PPTX.jl\",\n)\n\nType to contain the final presentation you want to write to .pptx.\n\nIf isempty(slides) then we add a first slide with the Title slide layout.\n\nExamples\n\njulia> using PPTX\n\njulia> pres = Presentation(; title = \"My Presentation\", author = \"PPTX.jl\")\nPresentation with 1 slide\n title is \"My Presentation\"\n author is \"PPTX.jl\"\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.Slide","page":"API Reference","title":"PPTX.Slide","text":"Slide(\n    shapes::Vector{AbstractShape}=AbstractShape[];\n    title::String=\"\",\n    layout::Int=1,\n)\n\nshapes::Vector{AbstractShape} shapes to add to the PowerPoint, can also be pushed afterwards\ntitle::String title text placed inside the title textbox found in the slide layout\nlayout::Int which slide layout to use. Typically 1 is the title slide and 2 is the text slide.\n\nMake a Slide for a powerpoint Presentation.\n\nYou can push! any AbstractShape types into this slide, such as a TextBox or Picture.\n\nExamples\n\njulia> using PPTX\n\njulia> slide = Slide(; title=\"Hello Title\", layout=2)\nSlide(\"Hello Title\", PPTX.AbstractShape[], 0, 2)\n\njulia> text = TextBox(\"Hello world!\")\nTextBox\n content is \"Hello world!\"\n offset_x is 1800000 EMUs\n offset_y is 1800000 EMUs\n size_x is 1440000 EMUs\n size_y is 1080000 EMUs\n\njulia> push!(slide, text);\n\njulia> slide\nSlide(\"Hello Title\", PPTX.AbstractShape[TextBox], 0, 2)\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.Table","page":"API Reference","title":"PPTX.Table","text":"Table(;\n    content,\n    offset_x::Real = 50,\n    offset_y::Real = 50,\n    size_x::Real = 150,\n    size_y::Real = 100,\n    column_widths::Vector{<:Real}, # set size per column\n    row_heights::Vector{<:Real}, # set size per row\n    header::Bool = true, # whether to automatically write the columnnames as headers\n    bandrow::Bool = true, # whether to use alternating coloring per row\n)\n\nA Table to be used on a Slide.\n\nThe content can be anything that adheres to a Tables.jl interface.\n\nOffsets and sizes are in millimeters, but will be converted to EMU.\n\nTo style each cell individually see TableCell.\n\nExamples\n\njulia> using PPTX, DataFrames\n\njulia> df = DataFrame(a = [1,2], b = [3,4], c = [5,6])\n2×3 DataFrame\n Row │ a      b      c     \n     │ Int64  Int64  Int64 \n─────┼─────────────────────\n   1 │     1      3      5\n   2 │     2      4      6\n\njulia> t = Table(content=df, size_x=30)\nTable\n content isa DataFrames.DataFrame\n offset_x is 1800000 EMUs\n offset_y is 1800000 EMUs\n size_x is 1080000 EMUs\n size_y is 3600000 EMUs\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.TableCell","page":"API Reference","title":"PPTX.TableCell","text":"TableCell(\n    content; # text\n    textstyle = TextStyle(),\n    color = nothing, # background color of the table element\n    anchor = nothing, # anchoring of text in the cell, can be \"top\", \"bottom\" or \"center\"\n    lines,\n    margins,\n)\n\nCreate a styled TableCell for use inside a table/dataframe.\n\nExample\n\njulia> t = TableCell(4; color = :green, textstyle=(color=:blue,))\nTableCell\n text is 4\n textstyle has\n  color is 0000FF\n background color is 008000\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.TextBox","page":"API Reference","title":"PPTX.TextBox","text":"function TextBox(;\n    content::String = \"\",\n    offset = (50,50), # millimeters\n    offset_x = offset[1],\n    offset_y = offset[2],\n    size = (40,30), # millimeters\n    size_x = size[1],\n    size_y = size[2],\n    hlink = nothing, # hyperlink\n    color = nothing, # use hex string, or Colorant\n    linecolor = nothing, # use hex string, or Colorant\n    linewidth = nothing, # use value in points, e.g. 3\n    rotation = nothing, # use a value in degrees, e.g. 90\n    textstyle = (italic = false, bold = false, fontsize = nothing),\n    margins = nothing, # e.g. (left=0.1, right=0.1, bottom=0.1, top=0.1) in millimeters\n)\n\nA TextBox to be used on a Slide. Offsets and sizes are in millimeters, but will be converted to EMU.\n\nSee TextStyle for more text style options.\n\nExamples\n\nusing PPTX\n\ntext = TextBox(\n    content=\"Hello world!\",\n    offset=(100, 50),\n    size=(30,50),\n    textstyle=(color=:white, bold=true),\n    color=:blue,\n    linecolor=:black,\n    linewidth=3\n)\n\n# output\n\nTextBox\n content is \"Hello world!\"\n content.style has\n  bold is true\n  color is FFFFFF\n offset_x is 3600000 EMUs\n offset_y is 1800000 EMUs\n size_x is 1080000 EMUs\n size_y is 1800000 EMUs\n color is 0000FF\n linecolor is 000000\n linewidth is 38100 EMUs\n\n\n\n\n\n\n","category":"type"},{"location":"api/#PPTX.TextStyle","page":"API Reference","title":"PPTX.TextStyle","text":"TextStyle(\n    bold = false,\n    italic = false,\n    underscore = false,\n    strike = false,\n    fontsize = nothing,\n    typeface = nothing, # or a string, like \"Courier New\"\n    color = nothing, # anything compliant with Colors.jl\n    align = nothing, # \"left\", \"right\" or \"center\"\n)\n\nStyle of the text inside a TextBox. You can use Colors.jl colorants for the text color, or directly provide a HEX string, or a symbol like :white.\n\njulia> using PPTX\n\njulia> style = TextStyle(bold=true, color=:red)\nTextStyle\n bold is true\n italic is false\n underscore is false\n strike is false\n fontsize is nothing\n typeface is nothing\n color is FF0000\n align is nothing\n\njulia> text = TextBox(content = \"hello\"; style)\nTextBox\n content is \"hello\"\n content.style has\n  bold is true\n  color is FF0000\n offset_x is 1800000 EMUs\n offset_y is 1800000 EMUs\n size_x is 1440000 EMUs\n size_y is 1080000 EMUs\n\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.write-Tuple{String, Presentation}","page":"API Reference","title":"Base.write","text":"Base.write(\n    filepath::String,\n    p::Presentation;\n    overwrite::Bool=false,\n    open_ppt::Bool=true,\n    template_path::String=\"no-slides.pptx\",\n)\n\nfilepath::String Desired presentation filepath.\npres::Presentation Presentation object to write.\noverwrite = false argument for overwriting existing file.\nopen_ppt = true open powerpoint after it is written.\ntemplate_path::String path to an (empty) pptx that serves as template.\n\nExamples\n\njulia> using PPTX\n\njulia> slide = Slide()\n\njulia> text = TextBox(\"Hello world!\")\n\njulia> push!(slide, text)\n\njulia> pres = Presentation()\n\njulia> push!(pres, slide)\n\njulia> write(\"hello_world.pptx\", pres)\n\n\n\n\n\n","category":"method"},{"location":"tablestyle/#Table-styling","page":"Table Styling","title":"Table styling","text":"","category":"section"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"A few examples on how to style a table.","category":"page"},{"location":"tablestyle/#Default-table","page":"Table Styling","title":"Default table","text":"","category":"section"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"A table/dataframe with regular values will use the default .pptx table style:","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"using PPTX, DataFrames\n\np = Presentation(title=\"Table\", author=\"PPTX.jl\")\ns = Slide(title=\"table example\")\npush!(p, s)\n\ndf = DataFrame(a = [1,2], b = [3,4], c = [5,6])\nt = Table(df; offset_x=50, offset_y=50, size_x=80, size_y=60)\n\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"(Image: default table)","category":"page"},{"location":"tablestyle/#General-table-styles","page":"Table Styling","title":"General table styles","text":"","category":"section"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"You can disable the header (automatically generated from the dataframe column names) and the bandrow (the 'banded' or alternating coloring of different rows).","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"using PPTX, DataFrames\n\np = Presentation(title=\"Table\", author=\"PPTX.jl\")\ns = Slide(title=\"table example\")\npush!(p, s)\n\ndf = DataFrame(a = [1,2], b = [3,4], c = [5,6])\nt = Table(df;\n    header=false, bandrow=false,\n    offset_x=50, offset_y=50, size_x=80, size_y=40\n)\n\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"(Image: table no header)","category":"page"},{"location":"tablestyle/#Table-element-styling","page":"Table Styling","title":"Table element styling","text":"","category":"section"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"You can overrule the table style per element.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"For example, let's color one box and add lines around it. We'll also center the alignment and anchor (vertical alignment) of the text.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"And let's also change the dash value. Possible values are \"solid\", \"dot\", \"dash\", \"dashDot\", \"lgDash\", \"lgDashDot\", \"sysDash\", \"sysDashDotDot\". Default is \"solid\".","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"You may have to fiddle a little with the lines, since neighboring cells have priority.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"using PPTX, DataFrames\n\np = Presentation(title=\"Table\", author=\"PPTX.jl\")\ns = Slide(title=\"table example\")\npush!(p, s)\n\n# missing color will make the cell transparant\nt1 = TableCell(1; color=missing)\n\n# a red cell with lines on all edges\n# top and left are actually overruled by neighboring cells\nt4 = TableCell(\n    4;\n    color=:darkred,\n    textstyle=(color=:white,align=:center),\n    anchor=:center,\n    lines=(\n        bottom=(width=3,color=:black),\n        right=(width=3,color=:black,dash=:sysDash),\n    )\n)\n\n# define lines of surrounding elements\n\nt2 = TableCell(\n    2;\n    lines=(\n        right=(width=3,color=:black,dash=:sysDash),\n    )\n)\n\nt3 = TableCell(\n    3;\n    lines=(\n        bottom=(width=3,color=:black),\n    )\n)\n\ndf = DataFrame(a = [t1,t2], b = [t3,t4], c = [5,6])\nt = Table(df; offset = (50,50), size = (80,60))\n\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"(Image: styled table)","category":"page"},{"location":"tablestyle/#Table-from-Matrix","page":"Table Styling","title":"Table from Matrix","text":"","category":"section"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"If you use a matrix as table content, the header will by default not be created. So you can add it manually through the styling.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"Let's also add some more complexity, like text direction, margins, colors, lines, etc.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"I will first define a few helper functions for the table cell styling:","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"using PPTX, Colors\n\nfunction row_header(x)\n    return TableCell(\n        x;\n        color = RGB(165/255, 168/255, 173/255),\n        textstyle = (align=:right, color=:white),\n        margins = (bottom=0.2, left=0.2, right=0.2, top=0.2,),\n        lines = (right=(width=3, color=:white),),\n        anchor = :center,\n    )\nend\n\nfunction column_header(x; color=RGB(165/255, 168/255, 173/255))\n    return TableCell(\n        x;\n        color = color,\n        textstyle = (align=:left, color=:white, bold=true),\n        margins = (bottom=0.2, left=0.2, right=0.2, top=0.2,),\n        lines = (bottom=(width=3, color=:white),),\n        direction = :vert270,\n        anchor = :center,\n    )\nend\n\nfunction cell_value(x::Real)\n    # cell color based on the value\n    if x < 0.3\n        # light red\n        color = RGB(255/255, 195/255, 161/255)\n    elseif x > 1.0\n        # light green\n        color = RGB(174/255, 232/255, 161/255)\n    else # light orange\n        color = RGB(255/255, 237/255, 153/255)\n    end\n    return TableCell(\n        x;\n        color = color,\n        textstyle = (align=:center, color=:black),\n        lines = (\n            bottom = (width=1, color=:white),\n            right = (width=1, color=:white),\n            ),\n        anchor = :center,\n    )\nend","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"Now let's create the table in PPTX, with custom row heights and column widths.","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"using PPTX, Colors\n\np = Presentation(title=\"Table\", author=\"PPTX.jl\")\ns = Slide(title=\"matrix table example\")\npush!(p, s)\n\ncol1_values = [\"metric 1\", \"metric 2\", \"metric 3\"]\ncol1 = [column_header(\"\", color=missing); row_header.(col1_values)]\ncol2_values = [0.55, 3.57, 0.01]\ncol2 = [column_header(\"option 1\"); cell_value.(col2_values)]\ncol3_values = [1.22, 0.2, 0.05]\ncol3 = [column_header(\"option 2\"); cell_value.(col3_values)]\ncell_matrix = [col1 col2 col3]\n\nt = Table(\n    cell_matrix;\n    offset = (50,50),\n    column_widths = [30, 20, 20],\n    row_heights = [30, 5, 5, 5],\n)\n\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)\n","category":"page"},{"location":"tablestyle/","page":"Table Styling","title":"Table Styling","text":"(Image: decision table)","category":"page"},{"location":"plots/#Plots","page":"Plots","title":"Plots","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"Quick examples for how make a plot, save it as a figure and add it to a .pptx presentation.","category":"page"},{"location":"plots/#Plots.jl","page":"Plots","title":"Plots.jl","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"using PPTX, Plots\n\np = Presentation(title=\"Plots\", author=\"PPTX.jl\")\ns = Slide(title=\"Plots.jl example\")\npush!(p, s)\n\n# create a save a\nx = range(0, 10, length=100)\ny = sin.(x)\nf = plot(x, y, size=(600,400))\nPlots.savefig(f, \"my_plot.png\")\n\nmy_picture = Picture(\"my_plot.png\", offset = (50,50), size = 160)\npush!(s, my_picture)\n\nt = TextBox(\"Code used:\", offset = (210,70), textstyle = (bold=true,))\npush!(s, t)\n\ntext = \"\"\"\nx = range(0, 10, length=100)\ny = sin.(x)\nf = plot(x, y)\n\"\"\"\nt = TextBox(text, offset = (215,80), size = (110,27), color = :lightgrey, textstyle = (typeface = \"Courier New\",))\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)","category":"page"},{"location":"plots/#Makie.jl","page":"Plots","title":"Makie.jl","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"Choose your own Makie backend (GLMakie, CairoMakie, etc).","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"using PPTX, GLMakie, Makie\n\np = Presentation(title=\"Plots\", author=\"PPTX.jl\")\ns = Slide(title=\"Makie.jl example\")\npush!(p, s)\n\n# create and save a figure\nf = Figure(size=(600,400))\nax = Axis(f[1, 1])\nx = range(0, 10, length=100)\ny = sin.(x)\nlines!(ax, x, y)\nsave(\"my_makie_plot.png\", f)\n\nmy_picture = Picture(\"my_makie_plot.png\", offset = (50,50), size = 160)\npush!(s, my_picture)\n\nt = TextBox(\"Code used:\", offset = (210,70), textstyle = (bold=true,))\npush!(s, t)\n\ntext = \"\"\"\nf = Figure(size=(600,400))\nax = Axis(f[1, 1])\nx = range(0, 10, length=100)\ny = sin.(x)\nlines!(ax, x, y)\n\"\"\"\nt = TextBox(text, offset = (215,80), size = (110,45), color = :lightgrey, textstyle = (typeface = \"Courier New\",))\npush!(s, t)\n\nwrite(\"example.pptx\", p; overwrite=true)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PPTX","category":"page"},{"location":"#PPTX","page":"Home","title":"PPTX","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PPTX.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interface functions are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages   = [\"api.md\"]","category":"page"},{"location":"#Example-usage","page":"Home","title":"Example usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can build a presentation inside Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PPTX, DataFrames\n\n# Lets make a presentation\n# note: this already adds a first slide with the title\npres = Presentation(; title=\"My First PowerPoint\", author=\"PPTX.jl\")\n\n# What about a slide with some text\ns2 = Slide(; title=\"My First Slide\")\ntext = TextBox(; content=\"hello world!\", offset_x=100, offset_y=100, size_x=150, size_y=20)\npush!(s2, text)\ntext2 = TextBox(;\n    content=\"here we are again\",\n    offset_x=100, offset_y=120, size_x=150, size_y=20,\n    text_style=(italic=true, fontsize=16)\n)\npush!(s2, text2)\npush!(pres, s2)\n\n# Now lets add a picture and some text\ncauli_pic = Picture(joinpath(PPTX.ASSETS_DIR,\"cauliflower.jpg\"))\ntext = TextBox(content=\"Look its a vegetable!\")\ns3 = Slide()\npush!(s3, cauli_pic)\npush!(s3, text)\n\n# move picture 100 mm down and 100 mm right\njulia_logo = Picture(joinpath(PPTX.ASSETS_DIR,\"julia_logo.png\"), offset_x=100, offset_y=100)\npush!(s3, julia_logo)\npush!(pres, s3)\n\n# and what about a table?\ns4 = Slide(; title=\"A Table\")\ndf = DataFrame(a = [1,2], b = [3,4], c = [5,6])\nmy_table = Table(df; offset_x=60, offset_y=80, size_x=150, size_y=40)\npush!(s4, my_table)\npush!(pres, s4)\n\n# and what about a nice link in slide 2 to the table-slide\ntext = TextBox(;\n    content=\"Click here to see a nice table\",\n    offset_x=100, offset_y=140, size_x=150, size_y=20,\n    hlink = s4 # link to slide 4\n)\npush!(s2, text)\n\npres\n\n# output\n\nPresentation with 4 slides\n title is \"My First PowerPoint\"\n author is \"PPTX.jl\"\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally you can write the PPTX file with PPTX.write:","category":"page"},{"location":"","page":"Home","title":"Home","text":"PPTX.write(\"example.pptx\", pres, overwrite = true, open_ppt=true)","category":"page"}]
}
